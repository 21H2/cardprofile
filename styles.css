// Dynamic title animation
const titles = ["Just a Lost Soul", "Welcome to My Space", "Exploring Darkness and Light"];
let titleIndex = 0;

setInterval(() => {
  document.getElementById("dynamic-title").textContent = titles[titleIndex];
  titleIndex = (titleIndex + 1) % titles.length;
}, 3000);

// Typewriter effect
const text = "In a world of chaos, I dwell in shadows, seeking beauty in the pain and whispers of the lost.";
let i = 0;
const speed = 50;

function typeWriter() {
  if (i < text.length) {
    document.querySelector(".typewriter").innerHTML += text.charAt(i);
    i++;
    setTimeout(typeWriter, speed);
  }
}

typeWriter();

// GSAP animations
gsap.from(".card", {duration: 1.5, opacity: 0, y: 50, ease: "power3.out"});
gsap.from(".profile-pic", {duration: 1, opacity: 0, scale: 0.5, ease: "back.out(1.7)", delay: 0.5});
gsap.from(".glitch", {duration: 1, opacity: 0, x: -50, ease: "power2.out", delay: 0.7});
gsap.from(".typewriter", {duration: 1, opacity: 0, y: 20, ease: "power2.out", delay: 1});
gsap.from(".social-links a", {duration: 0.5, opacity: 0, y: 20, stagger: 0.1, ease: "power2.out", delay: 1.5});
gsap.from(".grid-item", {duration: 0.5, opacity: 0, y: 20, stagger: 0.1, ease: "power2.out", delay: 2});

// 3D tilt effect
const card = document.querySelector('.card');
card.addEventListener('mousemove', (e) => {
  const rect = card.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const y = e.clientY - rect.top;
  
  const centerX = rect.width / 2;
  const centerY = rect.height / 2;
  
  const moveX = (x - centerX) / 25;
  const moveY = (y - centerY) / 25;
  
  card.style.transform = `perspective(1000px) rotateY(${moveX}deg) rotateX(${-moveY}deg)`;
});

card.addEventListener('mouseleave', () => {
  card.style.transform = 'perspective(1000px) rotateY(0deg) rotateX(0deg)';
});

// Particle effect
particlesJS("particles-js", {
  particles: {
    number: { value: 80, density: { enable: true, value_area: 800 } },
    color: { value: "#ffffff" },
    shape: { type: "circle", stroke: { width: 0, color: "#000000" }, polygon: { nb_sides: 5 }, image: { src: "img/github.svg", width: 100, height: 100 } },
    opacity: { value: 0.5, random: false, anim: { enable: false, speed: 1, opacity_min: 0.1, sync: false } },
    size: { value: 3, random: true, anim: { enable: false, speed: 40, size_min: 0.1, sync: false } },
    line_linked: { enable: true, distance: 150, color: "#ffffff", opacity: 0.4, width: 1 },
    move: { enable: true, speed: 6, direction: "none", random: false, straight: false, out_mode: "out", bounce: false, attract: { enable: false, rotateX: 600, rotateY: 1200 } }
  },
  interactivity: {
    detect_on: "canvas",
    events: { onhover: { enable: true, mode: "repulse" }, onclick: { enable: true, mode: "push" }, resize: true },
    modes: { grab: { distance: 400, line_linked: { opacity: 1 } }, bubble: { distance: 400, size: 40, duration: 2, opacity: 8, speed: 3 }, repulse: { distance: 200, duration: 0.4 }, push: { particles_nb: 4 }, remove: { particles_nb: 2 } }
  },
  retina_detect: true
});

// Smooth scroll animation
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    document.querySelector(this.getAttribute('href')).scrollIntoView({
      behavior: 'smooth'
    });
  });
});

// Random glitch effect
setInterval(() => {
  const glitch = document.querySelector('.glitch');
  glitch.style.textShadow = `${Math.random() * 10 - 5}px ${Math.random() * 10 - 5}px rgba(255,0,0,0.7),
                             ${Math.random() * 10 - 5}px ${Math.random() * 10 - 5}px rgba(0,255,0,0.7),
                             ${Math.random() * 10 - 5}px ${Math.random() * 10 - 5}px rgba(0,0,255,0.7)`;
  setTimeout(() => {
    glitch.style.textShadow = 'none';
  }, 50);
}, 3000);

// Parallax effect
document.addEventListener('mousemove', parallax);

function parallax(e) {
  this.querySelectorAll('.parallax').forEach(layer => {
    const speed = layer.getAttribute('data-speed');
    const x = (window.innerWidth - e.pageX * speed) / 100;
    const y = (window.innerHeight - e.pageY * speed) / 100;
    layer.style.transform = `translateX(${x}px) translateY(${y}px)`;
  });
}
